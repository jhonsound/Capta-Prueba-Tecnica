import dayjs, { Dayjs } from "dayjs";

// âœ… Convierte una fecha a string ISO (solo fecha, sin hora)
export function toISODateString(d: Date | Dayjs): string {
  return dayjs(d).format("YYYY-MM-DD");
}

// âœ… Determina si una fecha es dÃ­a hÃ¡bil (no sÃ¡bado, no domingo, no festivo)
export function isBusinessDay(d: Date | Dayjs, holidays: string[]): boolean {
  const date = dayjs(d); // ğŸ”¥ aseguramos consistencia
  const dow = date.day();
  return dow !== 0 && dow !== 6 && !holidays.includes(toISODateString(date));
}

// âœ… Retrocede hasta el dÃ­a hÃ¡bil mÃ¡s cercano (usado para normalizar fechas fuera de bloque)
export function goBackToNearestBusinessDay(
  d: Date | Dayjs,
  holidays: string[],
  A_END: number
): Dayjs {
  let date = dayjs(d);
  while (!isBusinessDay(date, holidays)) {
    date = date
      .subtract(1, "day")
      .hour(A_END)
      .minute(0)
      .second(0)
      .millisecond(0);
  }
  return date;
}

// âœ… Normaliza la hora hacia atrÃ¡s al Ãºltimo bloque hÃ¡bil disponible
export function normalizeHourBackward(
  d: Date | Dayjs,
  holidays: string[],
  A_END: number,
  M_END: number,
  A_START: number,
  M_START: number
): Dayjs {
  let date = goBackToNearestBusinessDay(d, holidays, A_END);
  const h = date.hour();

  if (h >= A_END) {
    // ğŸ”¥ si pasa la hora de fin de la tarde â†’ ajustar al final de la tarde
    date = date.hour(A_END).minute(0).second(0).millisecond(0);
  } else if (h >= M_END && h < A_START) {
    // ğŸ”¥ si estÃ¡ en la franja muerta entre maÃ±ana y tarde â†’ mover al fin de la maÃ±ana
    date = date.hour(M_END).minute(0).second(0).millisecond(0);
  } else if (h < M_START) {
    // ğŸ”¥ si es muy temprano â†’ retroceder un dÃ­a al final de la tarde anterior
    date = goBackToNearestBusinessDay(date.subtract(1, "day"), holidays, A_END);
    date = date.hour(A_END).minute(0).second(0).millisecond(0);
  }

  return date;
}

// âœ… Avanza al siguiente dÃ­a hÃ¡bil y lo normaliza al inicio del bloque de la maÃ±ana
export function advanceToNextBusinessDay(
  d: Date | Dayjs,
  holidays: string[],
  M_START: number
): Dayjs {
  let date = dayjs(d);
  do {
    date = date.add(1, "day");
  } while (!isBusinessDay(date, holidays));

  return date.hour(M_START).minute(0).second(0).millisecond(0);
}

// âœ… Normaliza la hora hacia adelante al siguiente bloque hÃ¡bil disponible
export function normalizeHourForward(
  d: Date | Dayjs,
  holidays: string[],
  M_START: number,
  M_END: number,
  A_START: number,
  A_END: number
): Dayjs {
  let date = dayjs(d);

  if (!isBusinessDay(date, holidays)) {
    // ğŸ”¥ si no es dÃ­a hÃ¡bil â†’ siguiente dÃ­a hÃ¡bil al inicio de la maÃ±ana
    return advanceToNextBusinessDay(date, holidays, M_START);
  }

  const h = date.hour();

  if (h < M_START) {
    // ğŸ”¥ antes de la maÃ±ana â†’ mover al inicio de la maÃ±ana
    date = date.hour(M_START).minute(0).second(0).millisecond(0);
  } else if (h >= M_END && h < A_START) {
    // ğŸ”¥ en la franja muerta entre maÃ±ana y tarde â†’ mover al inicio de la tarde
    date = date.hour(A_START).minute(0).second(0).millisecond(0);
  } else if (h >= A_END) {
    // ğŸ”¥ despuÃ©s de la tarde â†’ saltar al prÃ³ximo dÃ­a hÃ¡bil
    date = advanceToNextBusinessDay(date, holidays, M_START);
  }

  return date;
}
